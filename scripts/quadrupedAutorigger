import maya.cmds as cmds

''' Place locators to define rig shape '''

def SetColorOverrideBlue(s):
    cmds.setAttr(s + '.overrideEnabled', 1)
    cmds.setAttr(s + '.overrideColor', 15)

def SetColorOverrideYellow(s):
    cmds.setAttr(s + '.overrideEnabled', 1)
    cmds.setAttr(s + '.overrideColor', 17)

def SetColorOverrideRed(s):
    cmds.setAttr(s + '.overrideEnabled', 1)
    cmds.setAttr(s + '.overrideColor', 13)
    
def lockTranslate(s):
    cmds.setAttr(s + '.tx', k = False, l = True)
    cmds.setAttr(s + '.ty', k = False, l = True)
    cmds.setAttr(s + '.tz', k = False, l = True)

def lockScale(s):
    cmds.setAttr(s + '.sx', k = False, l = True)
    cmds.setAttr(s + '.sy', k = False, l = True)
    cmds.setAttr(s + '.sz', k = False, l = True)

def lockRotate(s):
    cmds.setAttr(s + '.rx', k = False, l = True)
    cmds.setAttr(s + '.ry', k = False, l = True)
    cmds.setAttr(s + '.rz', k = False, l = True)

hindToe = cmds.spaceLocator(n='L_hindToe_LOC')
cmds.setAttr(hindToe[0]+'.translateX', 12)
cmds.setAttr(hindToe[0]+'.translateZ', -20)
SetColorOverrideBlue(hindToe[0])

hindAnkle = cmds.spaceLocator(n='L_hindAnkle_LOC')
cmds.setAttr(hindAnkle[0]+'.translateX', 12)
cmds.setAttr(hindAnkle[0]+'.translateY', 5)
cmds.setAttr(hindAnkle[0]+'.translateZ', -23)
SetColorOverrideBlue(hindAnkle[0])

hindKnee = cmds.spaceLocator(n='L_hindKnee_LOC')
cmds.setAttr(hindKnee[0]+'.translateX', 12)
cmds.setAttr(hindKnee[0]+'.translateY', 25)
cmds.setAttr(hindKnee[0]+'.translateZ', -28)
SetColorOverrideBlue(hindKnee[0])

hindUpperKnee = cmds.spaceLocator(n='L_hindUpperKnee_LOC')
cmds.setAttr(hindUpperKnee[0]+'.translateX', 12)
cmds.setAttr(hindUpperKnee[0]+'.translateY', 36)
cmds.setAttr(hindUpperKnee[0]+'.translateZ', -19)
SetColorOverrideBlue(hindUpperKnee[0])

hindFemur = cmds.spaceLocator(n='L_hindFemur_LOC')
cmds.setAttr(hindFemur[0]+'.translateX', 12)
cmds.setAttr(hindFemur[0]+'.translateY', 50)
cmds.setAttr(hindFemur[0]+'.translateZ', -25)
SetColorOverrideBlue(hindFemur[0])

hindPelvis = cmds.spaceLocator(n='L_hindPelvis_LOC')
cmds.setAttr(hindPelvis[0]+'.translateY', 54)
cmds.setAttr(hindPelvis[0]+'.translateZ', -24)
SetColorOverrideYellow(hindPelvis[0])

hindLocGrp = cmds.group(hindToe,hindAnkle, hindKnee, hindUpperKnee, hindFemur, hindPelvis, n='HindPlacement_GRP')

''' Front leg locator placement '''
frontToe = cmds.spaceLocator(n='L_frontToe_LOC')
cmds.setAttr(frontToe[0]+'.translateX', 12)
cmds.setAttr(frontToe[0]+'.translateZ', 24)
SetColorOverrideBlue(frontToe[0])

frontAnkle = cmds.spaceLocator(n='L_frontAnkle_LOC')
cmds.setAttr(frontAnkle[0]+'.translateX', 12)
cmds.setAttr(frontAnkle[0]+'.translateY', 5)
cmds.setAttr(frontAnkle[0]+'.translateZ', 21)
SetColorOverrideBlue(frontAnkle[0])

frontKnee = cmds.spaceLocator(n='L_frontKnee_LOC')
cmds.setAttr(frontKnee[0]+'.translateX', 12)
cmds.setAttr(frontKnee[0]+'.translateY', 25)
cmds.setAttr(frontKnee[0]+'.translateZ', 24)
SetColorOverrideBlue(frontKnee[0])

frontUpperKnee = cmds.spaceLocator(n='L_frontUpperKnee_LOC')
cmds.setAttr(frontUpperKnee[0]+'.translateX', 12)
cmds.setAttr(frontUpperKnee[0]+'.translateY', 36)
cmds.setAttr(frontUpperKnee[0]+'.translateZ', 18)
SetColorOverrideBlue(frontUpperKnee[0])

frontFemur = cmds.spaceLocator(n='L_frontFemur_LOC')
cmds.setAttr(frontFemur[0]+'.translateX', 12)
cmds.setAttr(frontFemur[0]+'.translateY', 44)
cmds.setAttr(frontFemur[0]+'.translateZ', 25)
SetColorOverrideBlue(frontFemur[0])

frontPelvis = cmds.spaceLocator(n='L_frontPelvis_LOC')
cmds.setAttr(frontPelvis[0]+'.translateY', 54)
cmds.setAttr(frontPelvis[0]+'.translateZ', 20)
SetColorOverrideYellow(frontPelvis[0])

frontLocGrp = cmds.group(frontToe, frontAnkle, frontKnee, frontUpperKnee, frontFemur, frontPelvis, n='FrontPlacement_GRP')

''' Neck locators '''
neckRoot = cmds.spaceLocator(n='NeckRoot_LOC')
cmds.setAttr(neckRoot[0]+'.translateY', 48)
cmds.setAttr(neckRoot[0]+'.translateZ', 30)
SetColorOverrideYellow(neckRoot[0])

neckEnd = cmds.spaceLocator(n='neckEnd_LOC')
cmds.setAttr(neckEnd[0]+'.translateY', 58)
cmds.setAttr(neckEnd[0]+'.translateZ', 50)
SetColorOverrideYellow(neckEnd[0])

neckLocGrp = cmds.group(neckRoot, neckEnd, n='NeckPlacement_GRP')

''' Tail locators '''
tailRoot = cmds.spaceLocator(n='TailRoot_LOC')
cmds.setAttr(tailRoot[0]+'.translateY', 54)
cmds.setAttr(tailRoot[0]+'.translateZ', -32)
SetColorOverrideYellow(tailRoot[0])

tailEnd = cmds.spaceLocator(n='TailEnd_LOC')
cmds.setAttr(tailEnd[0]+'.translateY', 54)
cmds.setAttr(tailEnd[0]+'.translateZ', -62)
SetColorOverrideYellow(tailEnd[0])

tailLocGrp = cmds.group(tailRoot, tailEnd, n='TailPlacement_GRP')

''' Finalize placement locator module '''
mainLocGrp = cmds.group(tailLocGrp, neckLocGrp, frontLocGrp, hindLocGrp, n='MainPlacementLoc_GRP')

''' World Controller. TODO: Replace with Custom Curves'''
worldCtrl = cmds.circle(nr = [0,1,0], n = 'World Controller')[0]
subworldCtrl = cmds.circle(nr = [0,1,0],n = 'Sub World Controller')
subworldCtrl = subworldCtrl[0]
cmds.scale(0.7, 0.7, 0.7, subworldCtrl + '.cv[0:16]')
cmds.parent(subworldCtrl, worldCtrl)
cmds.select(d = True)
SetColorOverrideYellow(worldCtrl)

# cont up: worldController
# Hind legs Joints
''' Create legs module '''
hindPelvisJnt = cmds.joint(n = 'C_HindPelvis_JNT')
SetColorOverrideYellow(hindPelvisJnt)
constraint = cmds.pointConstraint(hindPelvis, hindPelvisJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_hindToeJnt = cmds.joint(n = 'L_HindToe_JNT')
SetColorOverrideYellow(L_hindToeJnt)
constraint = cmds.pointConstraint(hindToe, L_hindToeJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_hindAnkleJnt = cmds.joint(n = 'L_HindAnkle_JNT')
SetColorOverrideYellow(L_hindAnkleJnt)
constraint = cmds.pointConstraint(hindAnkle, L_hindAnkleJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_hindKneeJnt = cmds.joint(n = 'L_HindKnee_JNT')
SetColorOverrideYellow(L_hindKneeJnt)
constraint = cmds.pointConstraint(hindKnee, L_hindKneeJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_hindUpperKneeJnt = cmds.joint(n = 'L_HindUpperKnee_JNT')
SetColorOverrideYellow(L_hindUpperKneeJnt) 
constraint = cmds.pointConstraint(hindUpperKnee, L_hindUpperKneeJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_hindFemurJnt = cmds.joint(n = 'L_HindFemur_JNT') 
SetColorOverrideYellow(L_hindFemurJnt)
constraint = cmds.pointConstraint(hindFemur, L_hindFemurJnt)
cmds.delete(constraint)
cmds.select(d = True)

# Mirror joints to L & R sides
R_hindToeJnt = cmds.duplicate(L_hindToeJnt, n = 'R_HindToe_JNT')[0]
xPos = cmds.getAttr(L_hindToeJnt + '.tx')
cmds.setAttr(R_hindToeJnt + '.tx', -xPos)

R_hindAnkleJnt = cmds.duplicate(L_hindAnkleJnt, n = 'R_HindAnkle_JNT')[0]
xPos = cmds.getAttr(L_hindAnkleJnt + '.tx')
cmds.setAttr(R_hindAnkleJnt + '.tx', -xPos)

R_hindKneeJnt = cmds.duplicate(L_hindKneeJnt, n = 'R_HindKnee_JNT')[0]
xPos = cmds.getAttr(L_hindKneeJnt + '.tx')
cmds.setAttr(R_hindKneeJnt + '.tx', -xPos)

R_hindUpperKneeJnt = cmds.duplicate(L_hindUpperKneeJnt, n = 'R_HindUpperKnee_JNT')[0]
xPos = cmds.getAttr(L_hindUpperKneeJnt + '.tx')
cmds.setAttr(R_hindUpperKneeJnt + '.tx', -xPos)

R_hindFemurJnt = cmds.duplicate(L_hindFemurJnt, n = 'R_HindFemur_JNT')[0]
xPos = cmds.getAttr(L_hindFemurJnt + '.tx')
cmds.setAttr(R_hindFemurJnt + '.tx', -xPos)

# End joints for Maya skinning
L_hindToeEndJnt = cmds.joint(n = 'L_HindToeEnd_JNT')
constraint = cmds.pointConstraint(hindToe, L_hindToeEndJnt)
cmds.delete(constraint)
cmds.parent(L_hindToeEndJnt, L_hindToeJnt)
cmds.setAttr(L_hindToeEndJnt + '.tz', 0.04)
cmds.setAttr(L_hindToeEndJnt + '.visibility', 0)
cmds.select(d = True)

R_hindToeEndJnt = cmds.joint(n = 'R_HindToeEnd_JNT')
cmds.parent(R_hindToeEndJnt, R_hindToeJnt, r=True)
cmds.setAttr(R_hindToeEndJnt + '.tz', 0.04)
cmds.setAttr(R_hindToeEndJnt + '.visibility', 0)
cmds.select(d = True)

# Parent hind leg joints, set up both L & R joint chains
cmds.parent(L_hindToeJnt, L_hindAnkleJnt)
cmds.parent(L_hindAnkleJnt, L_hindKneeJnt)
cmds.parent(L_hindKneeJnt, L_hindUpperKneeJnt)
cmds.parent(L_hindUpperKneeJnt, L_hindFemurJnt)
cmds.parent(L_hindFemurJnt, hindPelvisJnt)

cmds.parent(R_hindToeJnt, R_hindAnkleJnt)
cmds.parent(R_hindAnkleJnt, R_hindKneeJnt)
cmds.parent(R_hindKneeJnt, R_hindUpperKneeJnt)
cmds.parent(R_hindUpperKneeJnt, R_hindFemurJnt)
cmds.parent(R_hindFemurJnt, hindPelvisJnt)

# Orient joints
cmds.select(L_hindFemurJnt)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(R_hindFemurJnt)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(d = True)

''' IK Hind Legs '''
L_hindToeJntIK = cmds.joint(n='L_HindToeIK_JNT')
constraint = cmds.pointConstraint(hindToe, L_hindToeJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindAnkleJntIK = cmds.joint(n = 'L_HindAnkleIK_JNT')
constraint = cmds.pointConstraint(hindAnkle, L_hindAnkleJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindKneeJntIK = cmds.joint(n = 'L_HindKneeIK_JNT')
constraint = cmds.pointConstraint(hindKnee, L_hindKneeJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindUpperKneeJntIK = cmds.joint(n = 'L_HindUpperKneeIK_JNT')
constraint = cmds.pointConstraint(hindUpperKnee, L_hindUpperKneeJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindFemurJntIK = cmds.joint(n = 'L_HindFemurIK_JNT') 
constraint = cmds.pointConstraint(hindFemur, L_hindFemurJntIK)
cmds.delete(constraint)
cmds.select(d = True)

# Mirror IK joints to L & R sides
R_hindToeJntIK = cmds.duplicate(L_hindToeJntIK, n = 'R_HindToeIK_JNT')[0]
xPos = cmds.getAttr(L_hindToeJntIK + '.tx')
cmds.setAttr(R_hindToeJntIK + '.tx', -xPos)

R_hindAnkleJntIK = cmds.duplicate(L_hindAnkleJntIK, n = 'R_HindAnkleIK_JNT')[0]
xPos = cmds.getAttr(L_hindAnkleJntIK + '.tx')
cmds.setAttr(R_hindAnkleJntIK + '.tx', -xPos)

R_hindKneeJntIK = cmds.duplicate(L_hindKneeJntIK, n = 'R_HindKneeIK_JNT')[0]
xPos = cmds.getAttr(L_hindKneeJntIK + '.tx')
cmds.setAttr(R_hindKneeJntIK + '.tx', -xPos)

R_hindUpperKneeJntIK = cmds.duplicate(L_hindUpperKneeJntIK, n = 'R_HindUpperKneeIK_JNT')[0]
xPos = cmds.getAttr(L_hindUpperKneeJntIK + '.tx')
cmds.setAttr(R_hindUpperKneeJntIK + '.tx', -xPos)

R_hindFemurJntIK = cmds.duplicate(L_hindFemurJntIK, n = 'R_HindFemurIK_JNT')[0]
xPos = cmds.getAttr(L_hindFemurJntIK + '.tx')
cmds.setAttr(R_hindFemurJntIK + '.tx', -xPos)

# Parent hind leg IK joints, set up both L & R IK joint chains
cmds.parent(L_hindToeJntIK, L_hindAnkleJntIK)
cmds.parent(L_hindAnkleJntIK, L_hindKneeJntIK)
cmds.parent(L_hindKneeJntIK, L_hindUpperKneeJntIK)
cmds.parent(L_hindUpperKneeJntIK, L_hindFemurJntIK)
cmds.parent(L_hindFemurJntIK, hindPelvisJnt)

cmds.parent(R_hindToeJntIK, R_hindAnkleJntIK)
cmds.parent(R_hindAnkleJntIK, R_hindKneeJntIK)
cmds.parent(R_hindKneeJntIK, R_hindUpperKneeJntIK)
cmds.parent(R_hindUpperKneeJntIK, R_hindFemurJntIK)
cmds.parent(R_hindFemurJntIK, hindPelvisJnt)

# Orient IK joints chain correctly
cmds.select(L_hindFemurJntIK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(R_hindFemurJntIK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(d = True)

''' FK Hind Legs '''
L_hindToeJntFK = cmds.joint(n='L_HindToeFK_JNT')
constraint = cmds.pointConstraint(hindToe, L_hindToeJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindAnkleJntFK = cmds.joint(n = 'L_HindAnkleFK_JNT')
constraint = cmds.pointConstraint(hindAnkle, L_hindAnkleJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindKneeJntFK = cmds.joint(n = 'L_HindKneeFK_JNT')
constraint = cmds.pointConstraint(hindKnee, L_hindKneeJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindUpperKneeJntFK = cmds.joint(n = 'L_HindUpperKneeFK_JNT')
constraint = cmds.pointConstraint(hindUpperKnee, L_hindUpperKneeJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_hindFemurJntFK = cmds.joint(n = 'L_HindFemurFK_JNT') 
constraint = cmds.pointConstraint(hindFemur, L_hindFemurJntFK)
cmds.delete(constraint)
cmds.select(d = True)

# Mirror FK joints to L & R sides
R_hindToeJntFK = cmds.duplicate(L_hindToeJntFK, n = 'R_HindToeFK_JNT')[0]
xPos = cmds.getAttr(L_hindToeJntFK + '.tx')
cmds.setAttr(R_hindToeJntFK + '.tx', -xPos)

R_hindAnkleJntFK = cmds.duplicate(L_hindAnkleJntFK, n = 'R_HindAnkleFK_JNT')[0]
xPos = cmds.getAttr(L_hindAnkleJntFK + '.tx')
cmds.setAttr(R_hindAnkleJntFK + '.tx', -xPos)

R_hindKneeJntFK = cmds.duplicate(L_hindKneeJntFK, n = 'R_HindKneeFK_JNT')[0]
xPos = cmds.getAttr(L_hindKneeJntFK + '.tx')
cmds.setAttr(R_hindKneeJntFK + '.tx', -xPos)

R_hindUpperKneeJntFK = cmds.duplicate(L_hindUpperKneeJntFK, n = 'R_HindUpperKneeFK_JNT')[0]
xPos = cmds.getAttr(L_hindUpperKneeJntFK + '.tx')
cmds.setAttr(R_hindUpperKneeJntFK + '.tx', -xPos)

R_hindFemurJntFK = cmds.duplicate(L_hindFemurJntFK, n = 'R_HindFemurFK_JNT')[0]
xPos = cmds.getAttr(L_hindFemurJntFK + '.tx')
cmds.setAttr(R_hindFemurJntFK + '.tx', -xPos)

# Parent hind leg FK joints, set up both L & R FK joint chains
cmds.parent(L_hindToeJntFK, L_hindAnkleJntFK)
cmds.parent(L_hindAnkleJntFK, L_hindKneeJntFK)
cmds.parent(L_hindKneeJntFK, L_hindUpperKneeJntFK)
cmds.parent(L_hindUpperKneeJntFK, L_hindFemurJntFK)
cmds.parent(L_hindFemurJntFK, hindPelvisJnt)

cmds.parent(R_hindToeJntFK, R_hindAnkleJntFK)
cmds.parent(R_hindAnkleJntFK, R_hindKneeJntFK)
cmds.parent(R_hindKneeJntFK, R_hindUpperKneeJntFK)
cmds.parent(R_hindUpperKneeJntFK, R_hindFemurJntFK)
cmds.parent(R_hindFemurJntFK, hindPelvisJnt)

# Orient FK joints chain correctly
cmds.select(L_hindFemurJntFK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(R_hindFemurJntFK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(d = True)

# Front Leg Joints
''' Create legs module '''
frontPelvisJnt = cmds.joint(n = 'C_FrontPelvis_JNT')
SetColorOverrideYellow(frontPelvisJnt)
constraint = cmds.pointConstraint(frontPelvis, frontPelvisJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_frontToeJnt = cmds.joint(n = 'L_FrontToe_JNT')
SetColorOverrideYellow(L_frontToeJnt)
constraint = cmds.pointConstraint(frontToe, L_frontToeJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_frontAnkleJnt = cmds.joint(n = 'L_FrontAnkle_JNT')
SetColorOverrideYellow(L_frontAnkleJnt)
constraint = cmds.pointConstraint(frontAnkle, L_frontAnkleJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_frontKneeJnt = cmds.joint(n = 'L_FrontKnee_JNT')
constraint = cmds.pointConstraint(frontKnee, L_frontKneeJnt)
cmds.delete(constraint)
cmds.select(d = True)
SetColorOverrideYellow(L_frontKneeJnt)

L_frontUpperKneeJnt = cmds.joint(n = 'L_FrontUpperKnee_JNT')
SetColorOverrideYellow(L_frontUpperKneeJnt) 
constraint = cmds.pointConstraint(frontUpperKnee, L_frontUpperKneeJnt)
cmds.delete(constraint)
cmds.select(d = True)

L_frontFemurJnt = cmds.joint(n = 'L_FrontFemur_JNT') 
SetColorOverrideYellow(L_frontFemurJnt)
constraint = cmds.pointConstraint(frontFemur, L_frontFemurJnt)
cmds.delete(constraint)
cmds.select(d = True)

# Mirror joints to L & R sides
R_frontToeJnt = cmds.duplicate(L_frontToeJnt, n = 'R_FrontToe_JNT')[0]
xPos = cmds.getAttr(L_frontToeJnt + '.tx')
cmds.setAttr(R_frontToeJnt + '.tx', -xPos)

R_frontAnkleJnt = cmds.duplicate(L_frontAnkleJnt, n = 'R_FrontAnkle_JNT')[0]
xPos = cmds.getAttr(L_frontAnkleJnt + '.tx')
cmds.setAttr(R_frontAnkleJnt + '.tx', -xPos)

R_frontKneeJnt = cmds.duplicate(L_frontKneeJnt, n = 'R_FrontKnee_JNT')[0]
xPos = cmds.getAttr(L_frontKneeJnt + '.tx')
cmds.setAttr(R_frontKneeJnt + '.tx', -xPos)

R_frontUpperKneeJnt = cmds.duplicate(L_frontUpperKneeJnt, n = 'R_FrontUpperKnee_JNT')[0]
xPos = cmds.getAttr(L_frontUpperKneeJnt + '.tx')
cmds.setAttr(R_frontUpperKneeJnt + '.tx', -xPos)

R_frontFemurJnt = cmds.duplicate(L_frontFemurJnt, n = 'R_FrontFemur_JNT')[0]
xPos = cmds.getAttr(L_frontFemurJnt + '.tx')
cmds.setAttr(R_frontFemurJnt + '.tx', -xPos)

# End joints for Maya skinning
L_frontToeEndJnt = cmds.joint(n = 'L_FrontToeEnd_JNT')
constraint = cmds.pointConstraint(frontToe, L_frontToeEndJnt)
cmds.delete(constraint)
cmds.parent(L_frontToeEndJnt, L_frontToeJnt)
cmds.setAttr(L_frontToeEndJnt + '.tz', 0.04)
cmds.setAttr(L_frontToeEndJnt + '.visibility', 0)
cmds.select(d = True)

R_frontToeEndJnt = cmds.joint(n = 'R_FrontToeEnd_JNT')
cmds.parent(R_frontToeEndJnt, R_frontToeJnt, r=True)
cmds.setAttr(R_frontToeEndJnt + '.tz', 0.04)
cmds.setAttr(R_frontToeEndJnt + '.visibility', 0)
cmds.select(d = True)

# Parent front leg joints, set up both L & R joint chains
cmds.parent(L_frontToeJnt, L_frontAnkleJnt)
cmds.parent(L_frontAnkleJnt, L_frontKneeJnt)
cmds.parent(L_frontKneeJnt, L_frontUpperKneeJnt)
cmds.parent(L_frontUpperKneeJnt, L_frontFemurJnt)
cmds.parent(L_frontFemurJnt, frontPelvisJnt)
cmds.parent(R_frontToeJnt, R_frontAnkleJnt)
cmds.parent(R_frontAnkleJnt, R_frontKneeJnt)
cmds.parent(R_frontKneeJnt, R_frontUpperKneeJnt)
cmds.parent(R_frontUpperKneeJnt, R_frontFemurJnt)
cmds.parent(R_frontFemurJnt, frontPelvisJnt)
# TODO: cmds.parent(frontPelvisJnt, subworldCtrl)

# Orient joints
cmds.select(L_frontFemurJnt)
cmds.joint(e=True,zso=True, oj='xyz',secondaryAxisOrient='yup',ch=True)
cmds.select(R_frontFemurJnt)
cmds.joint(e=True,zso=True, oj='xyz',secondaryAxisOrient='yup',ch=True)
cmds.select(d=True)

''' IK Front Legs '''
L_frontToeJntIK = cmds.joint(n='L_FrontToeIK_JNT')
constraint = cmds.pointConstraint(frontToe, L_frontToeJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontAnkleJntIK = cmds.joint(n = 'L_FrontAnkleIK_JNT')
constraint = cmds.pointConstraint(frontAnkle, L_frontAnkleJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontKneeJntIK = cmds.joint(n = 'L_FrontKneeIK_JNT')
constraint = cmds.pointConstraint(frontKnee, L_frontKneeJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontUpperKneeJntIK = cmds.joint(n = 'L_FrontUpperKneeIK_JNT')
constraint = cmds.pointConstraint(frontUpperKnee, L_frontUpperKneeJntIK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontFemurJntIK = cmds.joint(n = 'L_FrontFemurIK_JNT') 
constraint = cmds.pointConstraint(frontFemur, L_frontFemurJntIK)
cmds.delete(constraint)
cmds.select(d = True)

# Mirror IK joints to L & R sides
R_frontToeJntIK = cmds.duplicate(L_frontToeJntIK, n = 'R_FrontToeIK_JNT')[0]
xPos = cmds.getAttr(R_frontToeJntIK + '.tx')
cmds.setAttr(R_frontToeJntIK + '.tx', -xPos)

R_frontAnkleJntIK = cmds.duplicate(L_frontAnkleJntIK, n = 'R_FrontAnkleIK_JNT')[0]
xPos = cmds.getAttr(R_frontAnkleJntIK + '.tx')
cmds.setAttr(R_frontAnkleJntIK + '.tx', -xPos)

R_frontKneeJntIK = cmds.duplicate(L_frontKneeJntIK, n = 'R_FrontKneeIK_JNT')[0]
xPos = cmds.getAttr(R_frontKneeJntIK + '.tx')
cmds.setAttr(R_frontKneeJntIK + '.tx', -xPos)

R_frontUpperKneeJntIK = cmds.duplicate(L_frontUpperKneeJntIK, n = 'R_FrontUpperKneeIK_JNT')[0]
xPos = cmds.getAttr(R_frontUpperKneeJntIK + '.tx')
cmds.setAttr(R_frontUpperKneeJntIK + '.tx', -xPos)

R_frontFemurJntIK = cmds.duplicate(L_frontFemurJntIK, n = 'R_FrontFemurIK_JNT')[0]
xPos = cmds.getAttr(R_frontFemurJntIK + '.tx')
cmds.setAttr(R_frontFemurJntIK + '.tx', -xPos)

# Parent front leg IK joints, set up both L & R IK joint chains
cmds.parent(L_frontToeJntIK, L_frontAnkleJntIK)
cmds.parent(L_frontAnkleJntIK, L_frontKneeJntIK)
cmds.parent(L_frontKneeJntIK, L_frontUpperKneeJntIK)
cmds.parent(L_frontUpperKneeJntIK, L_frontFemurJntIK)
cmds.parent(L_frontFemurJntIK, frontPelvisJnt)

cmds.parent(R_frontToeJntIK, R_frontAnkleJntIK)
cmds.parent(R_frontAnkleJntIK, R_frontKneeJntIK)
cmds.parent(R_frontKneeJntIK, R_frontUpperKneeJntIK)
cmds.parent(R_frontUpperKneeJntIK, R_frontFemurJntIK)
cmds.parent(R_frontFemurJntIK, frontPelvisJnt)

# Orient IK joints chain correctly
cmds.select(L_frontFemurJntIK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(R_frontFemurJntIK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(d = True)

''' FK Front Legs '''
L_frontToeJntFK = cmds.joint(n='L_FrontToeFK_JNT')
constraint = cmds.pointConstraint(frontToe, L_frontToeJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontAnkleJntFK = cmds.joint(n = 'L_FrontAnkleFK_JNT')
constraint = cmds.pointConstraint(frontAnkle, L_frontAnkleJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontKneeJntFK = cmds.joint(n = 'L_FrontKneeFK_JNT')
constraint = cmds.pointConstraint(frontKnee, L_frontKneeJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontUpperKneeJntFK = cmds.joint(n = 'L_FrontUpperKneeFK_JNT')
constraint = cmds.pointConstraint(frontUpperKnee, L_frontUpperKneeJntFK)
cmds.delete(constraint)
cmds.select(d = True)

L_frontFemurJntFK = cmds.joint(n = 'L_FrontFemurFK_JNT') 
constraint = cmds.pointConstraint(frontFemur, L_frontFemurJntFK)
cmds.delete(constraint)
cmds.select(d = True)

# Mirror FK joints to L & R sides
R_frontToeJntFK = cmds.duplicate(L_frontToeJntFK, n = 'R_FrontToeFK_JNT')[0]
xPos = cmds.getAttr(L_frontToeJntFK + '.tx')
cmds.setAttr(R_frontToeJntFK + '.tx', -xPos)

R_frontAnkleJntFK = cmds.duplicate(L_frontAnkleJntFK, n = 'R_FrontAnkleFK_JNT')[0]
xPos = cmds.getAttr(L_frontAnkleJntFK + '.tx')
cmds.setAttr(R_frontAnkleJntFK + '.tx', -xPos)

R_frontKneeJntFK = cmds.duplicate(L_frontKneeJntFK, n = 'R_FrontKneeFK_JNT')[0]
xPos = cmds.getAttr(L_frontKneeJntFK + '.tx')
cmds.setAttr(R_frontKneeJntFK + '.tx', -xPos)

R_frontUpperKneeJntFK = cmds.duplicate(L_frontUpperKneeJntFK, n = 'R_FrontUpperKneeFK_JNT')[0]
xPos = cmds.getAttr(L_frontUpperKneeJntFK + '.tx')
cmds.setAttr(R_frontUpperKneeJntFK + '.tx', -xPos)

R_frontFemurJntFK = cmds.duplicate(L_frontFemurJntFK, n = 'R_FrontFemurFK_JNT')[0]
xPos = cmds.getAttr(L_frontFemurJntFK + '.tx')
cmds.setAttr(R_frontFemurJntFK + '.tx', -xPos)

# Parent front leg FK joints, set up both L & R FK joint chains
cmds.parent(L_frontToeJntFK, L_frontAnkleJntFK)
cmds.parent(L_frontAnkleJntFK, L_frontKneeJntFK)
cmds.parent(L_frontKneeJntFK, L_frontUpperKneeJntFK)
cmds.parent(L_frontUpperKneeJntFK, L_frontFemurJntFK)
cmds.parent(L_frontFemurJntFK, frontPelvisJnt)

cmds.parent(R_frontToeJntFK, R_frontAnkleJntFK)
cmds.parent(R_frontAnkleJntFK, R_frontKneeJntFK)
cmds.parent(R_frontKneeJntFK, R_frontUpperKneeJntFK)
cmds.parent(R_frontUpperKneeJntFK, R_frontFemurJntFK)
cmds.parent(R_frontFemurJntFK, frontPelvisJnt)

# Orient FK joints chain correctly
cmds.select(L_frontFemurJntFK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(R_frontFemurJntFK)
cmds.joint(e = True, zso = True, oj = 'xyz', secondaryAxisOrient = 'yup', ch = True)
cmds.select(d = True)

# IK controllers
''' IK controllers: Left hind leg''' 
L_IK = cmds.ikHandle(sol = 'ikRPsolver', n = 'L_HindLeg_IK', sj = L_hindFemurJntIK, ee = L_hindAnkleJntIK)
L_hindIKCtrl = cmds.curve(d=1, p=[(1,0,-1),(-1,0,-1),(-1,0,1),(1,0,1),(1,0,-1)], k=[0,1,2,3,4], n='L_FootIK_CTRL')

# Get distance to get controller with decent scale from front hind leg toe to back hind leg toe
dist = cmds.createNode('distanceDimShape', n='temp_to_delete') 
legStart = cmds.xform(L_hindToeJntIK, q = True, ws = True, rp = True) # q = query for specific value, ws = world space, rq = rotation pivot point
legEnd = cmds.xform(L_frontToeJntIK, q = True, ws = True, rp = True) # q = query for specific value, ws = world space, rq = rotation pivot point
cmds.setAttr(dist + '.endPoint', *(legStart)) # Star sign to unpack the variable = different way to access values in a list
cmds.setAttr(dist + '.startPoint', *(legEnd))
distance = cmds.getAttr(dist + '.distance')
cmds.delete(cmds.listRelatives(dist, p = True))
distance = distance / 8
cmds.setAttr(L_hindIKCtrl + '.sx', distance)
cmds.setAttr(L_hindIKCtrl + '.sy', distance)
cmds.setAttr(L_hindIKCtrl + '.sz', distance)
cmds.makeIdentity(L_hindIKCtrl, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(L_hindIKCtrl)
L_HindIK_CTRL_GRP = cmds.group(L_hindIKCtrl, n = 'L_FootIKCtrl_GRP')
SetColorOverrideBlue(L_HindIK_CTRL_GRP)

constraint = cmds.pointConstraint(L_hindToeJnt, L_HindIK_CTRL_GRP)
cmds.delete(constraint)
cmds.parent(L_IK[0], L_hindIKCtrl)
cmds.setAttr(L_IK[0] + '.visibility', 0)

# Aim constraint makes the upper hind femur joints follow by some but lets the leg fold up like it should
cmds.aimConstraint(L_hindIKCtrl, L_hindFemurJntIK, n = 'L_Femur_Aim_Towards_Foot_CTRL', mo = True, wu = [0,0,0])
L_IK_Toe = cmds.ikHandle(sol = 'ikRPsolver', n = 'L_HindToe_IK', sj = L_hindAnkleJntIK, ee = L_hindToeJntIK)
cmds.parent(L_IK_Toe[0], L_hindIKCtrl)
cmds.setAttr(L_IK_Toe[0] + '.visibility', 0)

''' IK Controller: Right hind leg '''
R_IK = cmds.ikHandle(sol = 'ikRPsolver', n = 'R_HindLeg_IK', sj = R_hindUpperKneeJntIK, ee = R_hindAnkleJntIK)
R_hindIKCtrl = cmds.curve(d=1, p=[(1,0,-1),(-1,0,-1), (-1,0,1), (1,0,1),(1,0,-1)],k=[0,1,2,3,4], n='R_FootIK_CTRL')

cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_hindIKCtrl, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(R_hindIKCtrl)
R_HindIK_CTRL_GRP = cmds.group(R_hindIKCtrl, n = 'R_FootIKCtrl_GRP')
SetColorOverrideRed(R_HindIK_CTRL_GRP)

constraint = cmds.pointConstraint(R_hindToeJnt, R_HindIK_CTRL_GRP)
cmds.delete(constraint)
cmds.parent(R_IK[0], R_hindIKCtrl)
cmds.setAttr(R_IK[0] + '.visibility', 0)

'''TODO: find location, doesn't fit, to safely delete
L_FrontToe_IK = cmds.ikHandle(sol = 'ikRPsolver', n = 'L_FrontToe_IK', sj = L_frontAnkleJntIK, ee = L_frontToeJntIK)
cmds.parent(L_FrontToe_IK[0],L_frontIKCtrl)
cmds.setAttr(L_FrontToe_IK[0]+'.visibility', 0)

R_FrontToe_IK = cmds.ikHandle(sol = 'ikRPsolver', n = 'R_FrontToe_IK', sj = R_frontAnkleJntIK[0], ee = R_frontToeJntIK[0])
cmds.parent(R_FrontToe_IK[0],R_frontIKCtrl)
cmds.setAttr(R_FrontToe_IK[0]+'.visibility',0)
'''

# Aim constraint makes the upper hind femur joints follow by some but lets the leg fold up like it should
cmds.aimConstraint(R_hindIKCtrl, R_hindFemurJntIK, n = 'R_Femur_Aim_Towards_Foot_CTRL', mo = True, wu = [0,0,0])
R_IK_Toe = cmds.ikHandle(sol = 'ikRPsolver', n = 'R_HindToe_IK', sj = R_hindAnkleJntIK, ee = R_hindToeJntIK)
cmds.parent(R_IK_Toe[0], R_hindIKCtrl)
cmds.setAttr(R_IK_Toe[0] + '.visibility', 0)

''' IK Controller: Left front leg ''' 
L_Front_IK = cmds.ikHandle(sol = 'ikRPsolver', n = 'L_FrontLeg_IK', sj = L_frontUpperKneeJntIK, ee = L_frontAnkleJntIK)
L_frontIKCtrl = cmds.curve(d=1, p=[(1,0,-1),(-1,0,-1),(-1,0,1),(1,0,1),(1,0,-1)], k=[0,1,2,3,4], n='L_Front_Foot_IK_CTRL')
cmds.setAttr(L_frontIKCtrl + '.sx', distance)
cmds.setAttr(L_frontIKCtrl + '.sy', distance)
cmds.setAttr(L_frontIKCtrl + '.sz', distance)
cmds.makeIdentity(L_frontIKCtrl, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(L_frontIKCtrl)
L_FrontIK_CTRL_GRP = cmds.group(L_frontIKCtrl, n = 'L_FrontFoot_IK_Ctrl_GRP')
SetColorOverrideBlue(L_FrontIK_CTRL_GRP)
constraint = cmds.pointConstraint(L_frontToeJnt, L_FrontIK_CTRL_GRP)
cmds.delete(constraint)
cmds.parent(L_Front_IK[0], L_frontIKCtrl)
cmds.setAttr(L_Front_IK[0] + '.visibility', 0)

''' Left IK Front Leg Rotation Controller '''
L_frontLeg_Rotation=cmds.circle(nr = (1, 0, 0), c = (0, 0, 0), n = 'L_FrontLeg_Rotate_CTRL')[0]
L_frontLeg_Rotation_GRP = cmds.group(L_frontLeg_Rotation, n = 'L_FrontLeg_Rotate_CTRL_GRP')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_frontLeg_Rotation_GRP,apply=True, t=1, r=1, s=1, n=0)
constraint=cmds.pointConstraint(L_frontFemurJntFK, L_frontLeg_Rotation_GRP)
cmds.delete(constraint)
SetColorOverrideBlue(L_frontLeg_Rotation)

''' IK Controller: Right front leg '''
R_Front_IK = cmds.ikHandle(sol = 'ikRPsolver', n = 'R_FrontLeg_IK', sj = R_frontUpperKneeJntIK, ee = R_frontAnkleJntIK)
R_frontIKCtrl = cmds.curve(d=1, p=[(1,0,-1),(-1,0,-1),(-1,0,1),(1,0,1),(1,0,-1)], k=[0,1,2,3,4], n='R_Front_Foot_IK_CTRL')
cmds.setAttr(R_frontIKCtrl + '.sx', distance)
cmds.setAttr(R_frontIKCtrl + '.sy', distance)
cmds.setAttr(R_frontIKCtrl + '.sz', distance)
cmds.makeIdentity(R_frontIKCtrl, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(R_frontIKCtrl)

R_FrontIK_CTRL_GRP = cmds.group(R_frontIKCtrl, n = 'R_FrontFoot_IK_Ctrl_GRP')
SetColorOverrideRed(R_FrontIK_CTRL_GRP)
constraint = cmds.pointConstraint(R_frontToeJnt, R_FrontIK_CTRL_GRP)
cmds.delete(constraint)
cmds.parent(R_Front_IK[0], R_frontIKCtrl)
cmds.setAttr(R_Front_IK[0] + '.visibility', 0)

# Right IK Front Leg Rotation Controller
R_frontLeg_Rotation=cmds.circle(nr = (1, 0, 0), c = (0, 0, 0), n = 'R_FrontLeg_Rotate_CTRL')[0]
R_frontLeg_Rotation_GRP = cmds.group(R_frontLeg_Rotation, n = 'R_FrontLeg_Rotate_CTRL_GRP')
cmds.scale(distance, distance, distance)
cmds.makeIdentity(R_frontLeg_Rotation_GRP, apply=True, t=1, r=1, s=1, n=0) 
constraint=cmds.pointConstraint(R_frontFemurJntFK, R_frontLeg_Rotation_GRP)
cmds.delete(constraint)
SetColorOverrideRed(R_frontLeg_Rotation)

''' Create IK polevector for L hind IK '''
# Left Hind IK PoleVector
L_hindPole = cmds.curve(d=1, p=[(-1.03923,0,0.6),(1.03923,0,0.6),(0,0,-1.2),(-1.03923,0,0.6)], k=[0,1,2,3],n='L_HindPoleVector_CTRL')
cmds.scale(distance/2, distance/2, distance/2)
cmds.makeIdentity(L_hindPole, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(L_hindPole)
lockRotate(L_hindPole)
L_HindPole_GRP = cmds.group(L_hindPole, n = 'L_HindPoleVector_CTRL_GRP')
constraint = cmds.parentConstraint(hindKnee, L_HindPole_GRP)
cmds.delete(constraint)

addDist = cmds.getAttr(L_HindPole_GRP + '.translateZ')
cmds.setAttr(L_HindPole_GRP + '.translateZ', addDist * 2)
SetColorOverrideBlue(L_hindPole)
cmds.poleVectorConstraint(L_hindPole, L_IK[0])

# If the leg rotates in a weird way: set the twist of the IK to 180 degrees to get the leg back to normal. Not always necessary (tested on Mac: necessary). 
cmds.setAttr(L_IK[0] + '.twist', 180)

# Right Hind IK PoleVector
R_hindPole=cmds.curve(d=1, p=[(-1.03923,0,0.6),(1.03923,0,0.6),(0,0,-1.2),(-1.03923,0,0.6)], k=[0,1,2,3],n='R_HindPoleVector_CTRL')
cmds.scale(distance/2, distance/2, distance/2)
cmds.makeIdentity(R_hindPole, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(R_hindPole)
lockRotate(R_hindPole)
R_HindPole_GRP = cmds.group(R_hindPole, n = 'R_HindPoleVector_CTRL_GRP')
constraint = cmds.parentConstraint(hindKnee, R_HindPole_GRP)
cmds.delete(constraint)
reverseDist = cmds.getAttr(R_HindPole_GRP + '.translateX')
cmds.setAttr(R_HindPole_GRP + '.translateX', -reverseDist)
cmds.setAttr(R_HindPole_GRP + '.translateZ', addDist * 2)
cmds.poleVectorConstraint(R_hindPole, R_IK[0])
SetColorOverrideRed(R_hindPole)

# If the leg rotates in a weird way: set the twist of the IK to 180 degrees to get the leg back to normal. Not always necessary. 
# cmds.setAttr(R_IK[0] + '.twist', 180) 

# Left & Right Front IK PoleVector
L_frontPole = cmds.curve(d=1, p=[(-1.03923,0,0.6),(1.03923,0,0.6),(0,0,-1.2),(-1.03923,0,0.6)], k=[0,1,2,3],n='L_FrontPoleVector_CTRL')
cmds.scale(distance/2, distance/2, distance/2)
cmds.makeIdentity(L_frontPole, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(L_frontPole)
lockRotate(L_frontPole)
L_FrontPole_GRP = cmds.group(L_frontPole, n = 'L_FrontPoleVector_CTRL_GRP')
constraint = cmds.parentConstraint(frontKnee, L_FrontPole_GRP)
cmds.delete(constraint)
addDist = cmds.getAttr(L_FrontPole_GRP + '.translateZ')
cmds.setAttr(L_FrontPole_GRP + '.translateZ', distance * 2)
SetColorOverrideBlue(L_frontPole)
cmds.poleVectorConstraint(L_frontPole, L_Front_IK[0])
# If the leg rotates in a weird way: set the twist of the IK to 180 degrees to get the leg back to normal. Not always necessary  (tested on Mac: necessary).  
cmds.setAttr(L_Front_IK[0] + '.twist', 180) 

R_frontPole = cmds.curve(d=1, p=[(-1.03923,0,0.6),(1.03923,0,0.6),(0,0,-1.2),(-1.03923,0,0.6)], k=[0,1,2,3],n='R_FrontPoleVector_CTRL')
cmds.scale(distance/2, distance/2, distance/2)
cmds.makeIdentity(R_frontPole, apply = True, t = 1, r = 1, s = 1, n = 0)
lockScale(R_frontPole)
lockRotate(R_frontPole)
R_FrontPole_GRP = cmds.group(R_frontPole, n = 'R_FrontPoleVector_CTRL_GRP')
constraint = cmds.parentConstraint(frontKnee, R_FrontPole_GRP)
cmds.delete(constraint)
addDist=cmds.getAttr(R_FrontPole_GRP+'.tz')
cmds.setAttr(R_FrontPole_GRP+'.tz', distance*2)
reverseDist = cmds.getAttr(R_FrontPole_GRP + '.translateX')
cmds.setAttr(R_FrontPole_GRP + '.translateX', -reverseDist)
SetColorOverrideRed(R_frontPole)
cmds.poleVectorConstraint(R_frontPole, R_Front_IK[0])
# If the leg rotates in a weird way: set the twist of the IK to 180 degrees to get the leg back to normal. Not always necessary. 
cmds.setAttr(R_Front_IK[0] + '.twist', 180) 

# Group IK Pole Vectors
poleVectorGRP = cmds.group(L_FrontPole_GRP, R_FrontPole_GRP, L_HindPole_GRP, R_HindPole_GRP, n='C_PoleVector_GRP')
IK_CTRL_GRP=cmds.group(poleVectorGRP,R_frontLeg_Rotation_GRP,L_frontLeg_Rotation_GRP,R_FrontIK_CTRL_GRP,L_FrontIK_CTRL_GRP,R_HindIK_CTRL_GRP,L_HindIK_CTRL_GRP, n='C_IK_CTRL_GRP')

# cont
''' FK Leg Setup '''
# FK Left Hind Leg
L_HindLeg_FK_CTRL = cmds.circle(nr = (0, 1, 0), c = (0, 0, 0), n = 'L_HindLeg_FK_CTRL')
cmds.scale(distance, distance, distance)
cmds.makeIdentity(L_HindLeg_FK_CTRL, apply=True, t=1, r=1, s=1, n=0)
L_HindLeg_FK_CTRL_GRP=cmds.group(L_HindLeg_FK_CTRL,n='L_HindLeg_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_hindFemurJntFK, L_HindLeg_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_HindLeg_FK_CTRL_GRP,L_hindFemurJntFK,mo=True)
lockScale(L_HindLeg_FK_CTRL[0])

L_HindUpperKneeF_FK_CTRL=cmds.circle(nr=(0, 1, 0), c=(0, 0, 0),n='L_HindUpperKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_HindUpperKneeF_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_HindUpperKnee_FK_CTRL_GRP=cmds.group(L_HindUpperKneeF_FK_CTRL,n='L_HindUpperKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_hindUpperKneeJntFK,L_HindUpperKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_HindUpperKneeF_FK_CTRL,L_hindUpperKneeJntFK,mo=True)
lockScale(L_HindUpperKneeF_FK_CTRL[0])

L_HindKnee_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='L_HindKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_HindKnee_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_HindKnee_FK_CTRL_GRP=cmds.group(L_HindKnee_FK_CTRL,n='L_HindKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_hindKneeJntFK,L_HindKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_HindKnee_FK_CTRL,L_hindKneeJntFK,mo=True)
lockScale(L_HindKnee_FK_CTRL[0])

L_HindAnkle_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='L_HindAnkle_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_HindAnkle_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_HindAnkle_FK_CTRL_GRP=cmds.group(L_HindAnkle_FK_CTRL,n='L_HindAnkle_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_hindAnkleJntFK,L_HindAnkle_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_HindAnkle_FK_CTRL,L_hindAnkleJntFK,mo=True)
lockScale(L_HindAnkle_FK_CTRL[0])

L_HindToe_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='L_HindToe_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_HindToe_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_HindToe_FK_CTRL_GRP=cmds.group(L_HindToe_FK_CTRL,n='L_HindToe_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_hindToeJntFK,L_HindToe_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_HindToe_FK_CTRL,L_hindToeJntFK,mo=True)
lockScale(L_HindToe_FK_CTRL[0])

# Parent hind left leg FK controllers to hind pelvis
cmds.parent(L_HindToe_FK_CTRL_GRP,L_HindAnkle_FK_CTRL[0])
cmds.parent(L_HindAnkle_FK_CTRL_GRP,L_HindKnee_FK_CTRL[0])
cmds.parent(L_HindKnee_FK_CTRL_GRP,L_HindUpperKneeF_FK_CTRL[0])
cmds.parent(L_HindUpperKnee_FK_CTRL_GRP,L_HindLeg_FK_CTRL[0])
SetColorOverrideBlue(L_HindLeg_FK_CTRL[0])
cmds.parentConstraint(hindPelvisJnt,L_HindLeg_FK_CTRL_GRP,mo=True)

# FK Right Hind Leg
R_HindLeg_FK_CTRL = cmds.circle(nr = (0, 1, 0), c = (0, 0, 0), n = 'R_HindLeg_FK_CTRL')
cmds.scale(distance, distance, distance)
cmds.makeIdentity(R_HindLeg_FK_CTRL, apply=True, t=1, r=1, s=1, n=0)
R_HindLeg_FK_CTRL_GRP=cmds.group(R_HindLeg_FK_CTRL,n='R_HindLeg_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_hindFemurJntFK, R_HindLeg_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_HindLeg_FK_CTRL_GRP,R_hindFemurJntFK,mo=True)
lockScale(R_HindLeg_FK_CTRL[0])

R_HindUpperKnee_FK_CTRL=cmds.circle(nr=(0, 1, 0), c=(0, 0, 0),n='R_HindUpperKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_HindUpperKnee_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_HindUpperKnee_FK_CTRL_GRP=cmds.group(R_HindUpperKnee_FK_CTRL,n='R_HindUpperKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_hindUpperKneeJntFK,R_HindUpperKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_HindUpperKnee_FK_CTRL,R_hindUpperKneeJntFK,mo=True)
lockScale(R_HindUpperKnee_FK_CTRL[0])

R_HindKnee_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='R_HindKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_HindKnee_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_HindKnee_FK_CTRL_GRP=cmds.group(R_HindKnee_FK_CTRL,n='R_HindKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_hindKneeJntFK,R_HindKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_HindKnee_FK_CTRL,R_hindKneeJntFK,mo=True)
lockScale(R_HindKnee_FK_CTRL[0])

R_HindAnkle_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='R_HindAnkle_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_HindAnkle_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_HindAnkle_FK_CTRL_GRP=cmds.group(R_HindAnkle_FK_CTRL,n='R_HindAnkle_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_hindAnkleJntFK,R_HindAnkle_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_HindAnkle_FK_CTRL,R_hindAnkleJntFK,mo=True)
lockScale(R_HindAnkle_FK_CTRL[0])

R_HindToe_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='R_HindToe_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_HindToe_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_HindToe_FK_CTRL_GRP=cmds.group(R_HindToe_FK_CTRL,n='R_HindToe_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_hindToeJntFK,R_HindToe_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_HindToe_FK_CTRL,R_hindToeJntFK,mo=True)
lockScale(R_HindToe_FK_CTRL[0])

# Parent hind right leg FK controllers to hind pelvis
cmds.parent(R_HindToe_FK_CTRL_GRP,R_HindAnkle_FK_CTRL[0])
cmds.parent(R_HindAnkle_FK_CTRL_GRP,R_HindKnee_FK_CTRL[0])
cmds.parent(R_HindKnee_FK_CTRL_GRP,R_HindUpperKnee_FK_CTRL[0])
cmds.parent(R_HindUpperKnee_FK_CTRL_GRP,R_HindLeg_FK_CTRL[0])
SetColorOverrideBlue(R_HindLeg_FK_CTRL[0])
cmds.parentConstraint(hindPelvisJnt,R_HindLeg_FK_CTRL_GRP,mo=True)

# FK Left Front Leg
L_FrontLeg_FK_CTRL = cmds.circle(nr = (0, 1, 0), c = (0, 0, 0), n = 'L_FrontLeg_FK_CTRL')
cmds.scale(distance, distance, distance)
cmds.makeIdentity(L_FrontLeg_FK_CTRL, apply=True, t=1, r=1, s=1, n=0)
L_FrontLeg_FK_CTRL_GRP=cmds.group(L_FrontLeg_FK_CTRL,n='L_FrontLeg_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_frontFemurJntFK, L_FrontLeg_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_FrontLeg_FK_CTRL_GRP,L_frontFemurJntFK,mo=True)
lockScale(L_FrontLeg_FK_CTRL[0])

L_FrontUpperKneeF_FK_CTRL=cmds.circle(nr=(0, 1, 0), c=(0, 0, 0),n='L_FrontUpperKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_FrontUpperKneeF_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_FrontUpperKnee_FK_CTRL_GRP=cmds.group(L_FrontUpperKneeF_FK_CTRL,n='L_FrontUpperKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_frontUpperKneeJntFK,L_FrontUpperKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_FrontUpperKneeF_FK_CTRL,L_frontUpperKneeJntFK,mo=True)
lockScale(L_FrontUpperKneeF_FK_CTRL[0])

L_FrontKnee_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='L_FrontKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_FrontKnee_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_FrontKnee_FK_CTRL_GRP=cmds.group(L_FrontKnee_FK_CTRL,n='L_FrontKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_frontKneeJntFK,L_FrontKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_FrontKnee_FK_CTRL,L_frontKneeJntFK,mo=True)
lockScale(L_FrontKnee_FK_CTRL[0])

L_FrontAnkle_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='L_FrontAnkle_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_FrontAnkle_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_FrontAnkle_FK_CTRL_GRP=cmds.group(L_FrontAnkle_FK_CTRL,n='L_FrontAnkle_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_frontAnkleJntFK,L_FrontAnkle_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_FrontAnkle_FK_CTRL,L_frontAnkleJntFK,mo=True)
lockScale(L_FrontAnkle_FK_CTRL[0])

L_FrontToe_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='L_FrontToe_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(L_FrontToe_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
L_FrontToe_FK_CTRL_GRP=cmds.group(L_FrontToe_FK_CTRL,n='L_FrontToe_FK_CTRL_GRP')
constraint=cmds.pointConstraint(L_frontToeJntFK,L_FrontToe_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(L_FrontToe_FK_CTRL,L_frontToeJntFK,mo=True)
lockScale(L_FrontToe_FK_CTRL[0])

# Parent left front leg FK controllers to front pelvis
cmds.parent(L_FrontToe_FK_CTRL_GRP,L_FrontAnkle_FK_CTRL[0])
cmds.parent(L_FrontAnkle_FK_CTRL_GRP,L_FrontKnee_FK_CTRL[0])
cmds.parent(L_FrontKnee_FK_CTRL_GRP,L_FrontUpperKneeF_FK_CTRL[0])
cmds.parent(L_FrontUpperKnee_FK_CTRL_GRP,L_FrontLeg_FK_CTRL[0])
SetColorOverrideBlue(L_FrontLeg_FK_CTRL[0])
cmds.parentConstraint(frontPelvisJnt,L_FrontLeg_FK_CTRL_GRP,mo=True)

# FK Right Front Leg
R_FrontLeg_FK_CTRL = cmds.circle(nr = (0, 1, 0), c = (0, 0, 0), n = 'R_FrontLeg_FK_CTRL')
cmds.scale(distance, distance, distance)
cmds.makeIdentity(R_FrontLeg_FK_CTRL, apply=True, t=1, r=1, s=1, n=0)
R_FrontLeg_FK_CTRL_GRP=cmds.group(R_FrontLeg_FK_CTRL,n='R_FrontLeg_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_frontFemurJntFK, R_FrontLeg_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_FrontLeg_FK_CTRL_GRP,R_frontFemurJntFK,mo=True)
lockScale(R_FrontLeg_FK_CTRL[0])

R_FrontUpperKneeF_FK_CTRL=cmds.circle(nr=(0, 1, 0), c=(0, 0, 0),n='R_FrontUpperKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_FrontUpperKneeF_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_FrontUpperKnee_FK_CTRL_GRP=cmds.group(R_FrontUpperKneeF_FK_CTRL,n='R_FrontUpperKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_frontUpperKneeJntFK,R_FrontUpperKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_FrontUpperKneeF_FK_CTRL,R_frontUpperKneeJntFK,mo=True)
lockScale(R_FrontUpperKneeF_FK_CTRL[0])

R_FrontKnee_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='R_FrontKnee_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_FrontKnee_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_FrontKnee_FK_CTRL_GRP=cmds.group(R_FrontKnee_FK_CTRL,n='R_FrontKnee_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_frontKneeJntFK,R_FrontKnee_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_FrontKnee_FK_CTRL,R_frontKneeJntFK,mo=True)
lockScale(R_FrontKnee_FK_CTRL[0])

R_FrontAnkle_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='R_FrontAnkle_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_FrontAnkle_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_FrontAnkle_FK_CTRL_GRP=cmds.group(R_FrontAnkle_FK_CTRL,n='R_FrontAnkle_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_frontAnkleJntFK,R_FrontAnkle_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_FrontAnkle_FK_CTRL,R_frontAnkleJntFK,mo=True)
lockScale(R_FrontAnkle_FK_CTRL[0])

R_FrontToe_FK_CTRL=cmds.circle( nr=(0, 1, 0), c=(0, 0, 0),n='R_FrontToe_FK_CTRL')
cmds.scale(distance,distance,distance)
cmds.makeIdentity(R_FrontToe_FK_CTRL,apply=True, t=1, r=1, s=1, n=0)
R_FrontToe_FK_CTRL_GRP=cmds.group(R_FrontToe_FK_CTRL,n='R_FrontToe_FK_CTRL_GRP')
constraint=cmds.pointConstraint(R_frontToeJntFK,R_FrontToe_FK_CTRL_GRP)
cmds.delete(constraint)
constraint=cmds.parentConstraint(R_FrontToe_FK_CTRL,R_frontToeJntFK,mo=True)
lockScale(R_FrontToe_FK_CTRL[0])

# Parent left front leg FK controllers to front pelvis
cmds.parent(R_FrontToe_FK_CTRL_GRP,R_FrontAnkle_FK_CTRL[0])
cmds.parent(R_FrontAnkle_FK_CTRL_GRP,R_FrontKnee_FK_CTRL[0])
cmds.parent(R_FrontKnee_FK_CTRL_GRP,R_FrontUpperKneeF_FK_CTRL[0])
cmds.parent(R_FrontUpperKnee_FK_CTRL_GRP,R_FrontLeg_FK_CTRL[0])
SetColorOverrideBlue(R_FrontLeg_FK_CTRL[0])
cmds.parentConstraint(frontPelvisJnt,R_FrontLeg_FK_CTRL_GRP,mo=True)

# Group fk controllers...
FK_CTRL_GRP=cmds.group(L_HindLeg_FK_CTRL_GRP,R_HindLeg_FK_CTRL_GRP,L_FrontLeg_FK_CTRL_GRP,R_FrontLeg_FK_CTRL_GRP, n='C_FK_CTRL_GRP')

''' IK FK Switch '''
# L & R Hind Leg Switch
L_hindSwitch=cmds.curve(d=3, p=[(0.474561,0,-1.241626),(0.171579,0,-1.214307),(-0.434384,0,-1.159672),(-1.124061,0,-0.419971),(-1.169741,0,0.305922),(-0.792507,0,1.018176),(-0.0412486,0,1.262687),(0.915809,0,1.006098),(1.258635,0,0.364883),(1.032378,0,-0.461231),(0.352527,0,-0.810017),(-0.451954,0,-0.43765),(-0.634527,0,0.208919),(-0.0751226,0,0.696326),(0.292338,0,0.414161),(0.476068,0,0.273078)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13],n='l_hindSwitch_CTRL')
cmds.scale(distance/3,distance/3,distance/3)
cmds.makeIdentity(apply=True, t=1,r=1,s=1,n=0)
lockScale(L_hindSwitch)
lockTranslate(L_hindSwitch)
lockRotate(L_hindSwitch)

L_HindSwitch_GRP=cmds.group(L_hindSwitch, n='L_HindSwitch_CTRL_GRP')
constraint=cmds.pointConstraint(L_hindAnkleJnt, L_HindSwitch_GRP)
cmds.delete(constraint)
dist=cmds.getAttr(L_HindSwitch_GRP+'.tz')
cmds.setAttr(L_HindSwitch_GRP+'.tz',dist-distance)

constraint=cmds.pointConstraint(L_hindAnkleJnt,L_HindSwitch_GRP,mo=True)
SetColorOverrideBlue(L_hindSwitch)
cmds.addAttr(L_hindSwitch,longName='Leg_functions',at='enum',en=('____'),k=True)
cmds.setAttr(L_hindSwitch+'.Leg_functions',l=True)
cmds.addAttr(L_hindSwitch,longName='IK_FK',at='float', min=0, max=1, k=True)

R_hindSwitch=cmds.curve(d=3, p=[(0.474561,0,-1.241626),(0.171579,0,-1.214307),(-0.434384,0,-1.159672),(-1.124061,0,-0.419971),(-1.169741,0,0.305922),(-0.792507,0,1.018176),(-0.0412486,0,1.262687),(0.915809,0,1.006098),(1.258635,0,0.364883),(1.032378,0,-0.461231),(0.352527,0,-0.810017),(-0.451954,0,-0.43765),(-0.634527,0,0.208919),(-0.0751226,0,0.696326),(0.292338,0,0.414161),(0.476068,0,0.273078)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13],n='l_hindSwitch_CTRR')
cmds.scale(distance/3,distance/3,distance/3)
cmds.makeIdentity(apply=True, t=1,r=1,s=1,n=0)
lockScale(R_hindSwitch)
lockTranslate(R_hindSwitch)
lockRotate(R_hindSwitch)

R_HindSwitch_GRP=cmds.group(R_hindSwitch, n='R_HindSwitch_CTRR_GRP')
constraint=cmds.pointConstraint(R_hindAnkleJnt, R_HindSwitch_GRP)
cmds.delete(constraint)
dist=cmds.getAttr(R_HindSwitch_GRP+'.tz')
cmds.setAttr(R_HindSwitch_GRP+'.tz',dist-distance)

constraint=cmds.pointConstraint(R_hindAnkleJnt,R_HindSwitch_GRP,mo=True)
SetColorOverrideRed(R_hindSwitch)
cmds.addAttr(R_hindSwitch,longName='Leg_functions',at='enum',en=('____'),k=True)
cmds.setAttr(R_hindSwitch+'.Leg_functions',l=True)
cmds.addAttr(R_hindSwitch,longName='IK_FK',at='float', min=0, max=1, k=True)

# Visibility of controllers: make sure you don't see the extra controllers when they're not active.
cmds.connectAttr(L_hindSwitch+'.IK_FK',L_HindLeg_FK_CTRL_GRP+'.visibility') 
cmds.connectAttr(R_hindSwitch+'.IK_FK',R_HindLeg_FK_CTRL_GRP+'.visibility')
Ik_FK_Hind_Reverse = cmds.createNode('reverse', n='IK_FK_HindLeg_REV')
cmds.connectAttr(L_hindSwitch+'.IK_FK', Ik_FK_Hind_Reverse+'.ix')
cmds.connectAttr(R_hindSwitch+'.IK_FK', Ik_FK_Hind_Reverse+'.iy')
cmds.connectAttr(Ik_FK_Hind_Reverse+'.ox', L_HindIK_CTRL_GRP+'.visibility') 
cmds.connectAttr(Ik_FK_Hind_Reverse+'.oy', R_HindIK_CTRL_GRP+'.visibility') 
cmds.connectAttr(Ik_FK_Hind_Reverse+'.ox', L_HindPole_GRP+'.visibility') 
cmds.connectAttr(Ik_FK_Hind_Reverse+'.oy', R_HindPole_GRP+'.visibility') 

# L & R Front Leg Switch
L_frontSwitch=cmds.curve(d=3, p=[(0.474561,0,-1.241626),(0.171579,0,-1.214307),(-0.434384,0,-1.159672),(-1.124061,0,-0.419971),(-1.169741,0,0.305922),(-0.792507,0,1.018176),(-0.0412486,0,1.262687),(0.915809,0,1.006098),(1.258635,0,0.364883),(1.032378,0,-0.461231),(0.352527,0,-0.810017),(-0.451954,0,-0.43765),(-0.634527,0,0.208919),(-0.0751226,0,0.696326),(0.292338,0,0.414161),(0.476068,0,0.273078)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13],n='l_frontSwitch_CTRL')
cmds.scale(distance/3,distance/3,distance/3)
cmds.makeIdentity(apply=True, t=1,r=1,s=1,n=0)
lockScale(L_frontSwitch)
lockTranslate(L_frontSwitch)
lockRotate(L_frontSwitch)

L_FrontSwitch_GRP=cmds.group(L_frontSwitch, n='L_FrontSwitch_CTRL_GRP')
constraint=cmds.pointConstraint(L_frontAnkleJnt, L_FrontSwitch_GRP)
cmds.delete(constraint)
dist=cmds.getAttr(L_FrontSwitch_GRP+'.tz')
cmds.setAttr(L_FrontSwitch_GRP+'.tz',dist-distance)

constraint=cmds.pointConstraint(L_frontAnkleJnt,L_FrontSwitch_GRP,mo=True)
SetColorOverrideBlue(L_frontSwitch)
cmds.addAttr(L_frontSwitch,longName='Leg_functions',at='enum',en=('____'),k=True)
cmds.setAttr(L_frontSwitch+'.Leg_functions',l=True)
cmds.addAttr(L_frontSwitch,longName='IK_FK',at='float', min=0, max=1, k=True)

R_frontSwitch=cmds.curve(d=3, p=[(0.474561,0,-1.241626),(0.171579,0,-1.214307),(-0.434384,0,-1.159672),(-1.124061,0,-0.419971),(-1.169741,0,0.305922),(-0.792507,0,1.018176),(-0.0412486,0,1.262687),(0.915809,0,1.006098),(1.258635,0,0.364883),(1.032378,0,-0.461231),(0.352527,0,-0.810017),(-0.451954,0,-0.43765),(-0.634527,0,0.208919),(-0.0751226,0,0.696326),(0.292338,0,0.414161),(0.476068,0,0.273078)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13],n='l_frontSwitch_CTRR')
cmds.scale(distance/3,distance/3,distance/3)
cmds.makeIdentity(apply=True, t=1,r=1,s=1,n=0)
lockScale(R_frontSwitch)
lockTranslate(R_frontSwitch)
lockRotate(R_frontSwitch)

R_FrontSwitch_GRP=cmds.group(R_frontSwitch, n='R_FrontSwitch_CTRR_GRP')
constraint=cmds.pointConstraint(R_frontAnkleJnt, R_FrontSwitch_GRP)
cmds.delete(constraint)
dist=cmds.getAttr(R_FrontSwitch_GRP+'.tz')
cmds.setAttr(R_FrontSwitch_GRP+'.tz',dist-distance)

constraint=cmds.pointConstraint(R_frontAnkleJnt,R_FrontSwitch_GRP,mo=True)
SetColorOverrideRed(R_frontSwitch)
cmds.addAttr(R_frontSwitch,longName='Leg_functions',at='enum',en=('____'),k=True)
cmds.setAttr(R_frontSwitch+'.Leg_functions',l=True)
cmds.addAttr(R_frontSwitch,longName='IK_FK',at='float', min=0, max=1, k=True)

# Visibility of controllers: make sure you don't see the extra controllers when they're not active.
cmds.connectAttr(L_frontSwitch+'.IK_FK',L_FrontLeg_FK_CTRL_GRP+'.visibility')
cmds.connectAttr(R_frontSwitch+'.IK_FK',R_FrontLeg_FK_CTRL_GRP+'.visibility')
IkFkfrontRev=cmds.createNode('reverse', n='IK_FK_frontLeg_REV')
cmds.connectAttr(L_frontSwitch+'.IK_FK', IkFkfrontRev+'.ix')
cmds.connectAttr(R_frontSwitch+'.IK_FK', IkFkfrontRev+'.iy')
cmds.connectAttr(IkFkfrontRev+'.ox', L_FrontIK_CTRL_GRP+'.visibility')
cmds.connectAttr(IkFkfrontRev+'.oy', R_FrontIK_CTRL_GRP+'.visibility')
cmds.connectAttr(IkFkfrontRev+'.ox', L_FrontPole_GRP+'.visibility')
cmds.connectAttr(IkFkfrontRev+'.oy', R_FrontPole_GRP+'.visibility')

# Group IK FK switch system
legSwitchGrp=cmds.group(L_FrontSwitch_GRP,R_FrontSwitch_GRP,L_HindSwitch_GRP,R_HindSwitch_GRP, n='C_LegSwitch_CTRL_GRP')
leg_CTRL_GRP=cmds.group(IK_CTRL_GRP,FK_CTRL_GRP, n='C_Leg_CTRL_GRP')

# Blend IK FK joint influence...
def BlendJoints(ikJoints,fkJoints,skinJoints,master):
    count=0
    for e in skinJoints:
        # Order: IK - FK - Main
        blendR1=cmds.shadingNode('blendColors',asUtility=True, n='L_IKFK_Switch_rotate_1')
        cmds.connectAttr(ikJoints[count]+'.rx',blendR1+'.color1R')
        cmds.connectAttr(ikJoints[count]+'.ry',blendR1+'.color1G')
        cmds.connectAttr(ikJoints[count]+'.rz',blendR1+'.color1B')
        cmds.connectAttr(fkJoints[count]+'.rx',blendR1+'.color2R')
        cmds.connectAttr(fkJoints[count]+'.ry',blendR1+'.color2G')
        cmds.connectAttr(fkJoints[count]+'.rz',blendR1+'.color2B')
        # Connect the master to the blender attribute
        cmds.connectAttr(blendR1+'.output.outputR',skinJoints[count]+'.rx')
        cmds.connectAttr(blendR1+'.output.outputG',skinJoints[count]+'.ry')
        cmds.connectAttr(blendR1+'.output.outputB',skinJoints[count]+'.rz')
        cmds.connectAttr(master,blendR1+'.blender')
        count+=1

skinJoints=[L_hindToeJnt,L_hindAnkleJnt,L_hindKneeJnt,L_hindUpperKneeJnt,L_hindFemurJnt]
ikJoints=[L_hindToeJntIK,L_hindAnkleJntIK,L_hindKneeJntIK,L_hindUpperKneeJntIK,L_hindFemurJntIK]
fkJoints=[L_hindToeJntFK,L_hindAnkleJntFK,L_hindKneeJntFK,L_hindUpperKneeJntFK,L_hindFemurJntFK]
master = Ik_FK_Hind_Reverse + '.ox' # Left leg
BlendJoints(ikJoints,fkJoints,skinJoints,master)

skinJoints=[R_hindToeJnt,R_hindAnkleJnt,R_hindKneeJnt,R_hindUpperKneeJnt,R_hindFemurJnt]
ikJoints=[R_hindToeJntIK,R_hindAnkleJntIK,R_hindKneeJntIK,R_hindUpperKneeJntIK,R_hindFemurJntIK]
fkJoints=[R_hindToeJntFK,R_hindAnkleJntFK,R_hindKneeJntFK,R_hindUpperKneeJntFK,R_hindFemurJntFK]
master = Ik_FK_Hind_Reverse + '.ox' # Right leg
BlendJoints(ikJoints,fkJoints,skinJoints,master)

skinJoints=[L_frontToeJnt,L_frontAnkleJnt,L_frontKneeJnt,L_frontUpperKneeJnt,L_frontFemurJnt]
ikJoints=[L_frontToeJntIK,L_frontAnkleJntIK,L_frontKneeJntIK,L_frontUpperKneeJntIK,L_frontFemurJntIK]
fkJoints=[L_frontToeJntFK,L_frontAnkleJntFK,L_frontKneeJntFK,L_frontUpperKneeJntFK,L_frontFemurJntFK]
master= IkFkfrontRev +'.ox'
BlendJoints(ikJoints,fkJoints,skinJoints,master)

skinJoints=[R_frontToeJnt,R_frontAnkleJnt,R_frontKneeJnt,R_frontUpperKneeJnt,R_frontFemurJnt]
ikJoints=[R_frontToeJntIK,R_frontAnkleJntIK,R_frontKneeJntIK,R_frontUpperKneeJntIK,R_frontFemurJntIK]
fkJoints=[R_frontToeJntFK,R_frontAnkleJntFK,R_frontKneeJntFK,R_frontUpperKneeJntFK,R_frontFemurJntFK]
master= IkFkfrontRev +'.ox'
BlendJoints(ikJoints,fkJoints,skinJoints,master)

# Front femur must be connected to translations
def BlendJointsTranslate(ikJoints,fkJoints,skinJoints,master):
    count=0
    for e in skinJoints:
        blendr1=cmds.shadingNode('blendColors',asUtility=True,n='L_IKFK_switch_translate_1')
        cmds.connectAttr(ikJoints[count]+'.tx',blendr1+'.color1R')
        cmds.connectAttr(ikJoints[count]+'.ty',blendr1+'.color1G')
        cmds.connectAttr(ikJoints[count]+'.tz',blendr1+'.color1B')
        cmds.connectAttr(fkJoints[count]+'.tx',blendr1+'.color2R')
        cmds.connectAttr(fkJoints[count]+'.ty',blendr1+'.color2G')
        cmds.connectAttr(fkJoints[count]+'.tz',blendr1+'.color2B')
        cmds.connectAttr(blendr1+'.output.outputR',skinJoints[count]+'.tx')
        cmds.connectAttr(blendr1+'.output.outputG',skinJoints[count]+'.ty')
        cmds.connectAttr(blendr1+'.output.outputB',skinJoints[count]+'.tz')
        cmds.connectAttr(master,blendr1+'.blender')
        count+=1    

skinJoints=[L_frontFemurJnt]
ikJoints=[L_frontFemurJntIK]
fkJoints=[L_frontFemurJntFK]
master=IkFkfrontRev+'.ox' 
BlendJointsTranslate(ikJoints,fkJoints,skinJoints,master)

skinJoints=[R_frontFemurJnt]
ikJoints=[R_frontFemurJntIK]
fkJoints=[R_frontFemurJntFK]
BlendJointsTranslate(ikJoints,fkJoints,skinJoints,master)

# Set of skinning joints
skinJntSet = cmds.sets(L_hindToeJnt,R_hindToeJnt,L_hindAnkleJnt,R_hindAnkleJnt,L_hindKneeJnt,R_hindKneeJnt,
L_hindUpperKneeJnt,R_hindUpperKneeJnt,L_hindFemurJnt,R_hindFemurJnt,L_frontToeJnt,R_frontToeJnt,
L_frontAnkleJnt,R_frontAnkleJnt,L_frontKneeJnt,R_frontKneeJnt,L_frontUpperKneeJnt,R_frontUpperKneeJnt,
L_frontFemurJnt,R_frontFemurJnt,n='Skin_JNT_Set')

''' Create tail/spine module '''
# Meassure the distance between joints and get tail root placement
dist=cmds.createNode('distanceDimShape', n='TEMP_DELETE')
tailStart=cmds.xform(tailRoot,q=True,ws=True,rp=True)
tailEnd=cmds.xform(tailEnd,q=True,ws=True,rp=True)
cmds.setAttr(dist+'.endPoint',*(tailEnd))
cmds.setAttr(dist+'.startPoint',*(tailStart))
distance=cmds.getAttr(dist+'.distance')
cmds.delete(cmds.listRelatives(dist, p=True))

# Joints in chain. TODO: Expose initialAmmountOfJoints in UI
initialAmmountOfJoints = 5
ammountOfJoints = initialAmmountOfJoints - 1
cmds.select(d=True)
tailRootJnt=cmds.joint(n='C_TailRoot_JNT')
while ammountOfJoints > 0:
    tailJnt=cmds.joint(n='C_Tail'+str(ammountOfJoints)+'_JNT')
    ammountOfJoints-=1
cmds.select(tailRootJnt, hi=True)
tailJointChain=cmds.ls(sl=True)

# Calculate translation distance between each joint...
ammountOfJoints = initialAmmountOfJoints - 1
distancePerJoint=distance/ammountOfJoints
for e in tailJointChain:
    cmds.setAttr(e+'.tz',-distancePerJoint)
cmds.setAttr(tailRootJnt+'.tz',0)
cmds.rename(tailJointChain[-1],tailJointChain[-1]+'End')
constraint=cmds.pointConstraint(tailRoot,tailJointChain[0])
